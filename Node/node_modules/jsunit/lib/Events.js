'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Events = function () {
    function Events() {
        _classCallCheck(this, Events);

        this.callbacks = {};
    }

    _createClass(Events, [{
        key: 'emit',
        value: function emit(eventName, payload) {
            var _callbacks$eventName = this.callbacks[eventName];
            var callbacks = _callbacks$eventName === undefined ? [] : _callbacks$eventName;


            callbacks.forEach(function (callback) {
                return callback(payload, eventName);
            });
        }
    }, {
        key: 'on',
        value: function on() {
            var eventName = arguments.length <= 0 || arguments[0] === undefined ? 'default' : arguments[0];
            var callback = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];
            var _callbacks$eventName2 = this.callbacks[eventName];
            var callbacks = _callbacks$eventName2 === undefined ? [] : _callbacks$eventName2;
            var index = callbacks.indexOf(callback);

            if (index !== -1) {
                return;
            }

            callbacks.push(callback);

            this.callbacks[eventName] = callbacks;
        }
    }, {
        key: 'un',
        value: function un(eventName, callback) {
            var _callbacks$eventName3 = this.callbacks[eventName];
            var callbacks = _callbacks$eventName3 === undefined ? [] : _callbacks$eventName3;
            var index = callback && callbacks.indexOf(callback);

            if (!callback) {
                this.callbacks[eventName] = [];
            } else if (index !== -1) {
                callbacks.splice(index, 1);
            }
        }
    }]);

    return Events;
}();

exports.default = Events;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _Component = require('./Component');

var _Component2 = _interopRequireDefault(_Component);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function renderToString(json, context) {
    if (Array.isArray(json)) {
        return json.map(function (item) {
            return renderToString(item, context);
        }).join('');
    } else if (typeof json === 'string' || typeof json === 'number') {
        return json;
    } else if ((typeof json === 'undefined' ? 'undefined' : _typeof(json)) === 'object' && json.component) {
        var _ret = function () {
            var component = json.component;
            var props = json.props;
            var children = json.children;
            var propsString = undefined;

            if (typeof component === 'string') {
                propsString = props && Object.keys(props).reduce(function (memo, key) {
                    if (typeof props[key] === 'string' || typeof props[key] === 'number') {
                        memo.push(key + '="' + props[key] + '"');
                    }

                    return memo;
                }, []).join(' ');

                return {
                    v: '<' + component + (propsString ? ' ' + propsString : '') + '>' + renderToString(children, context) + '</' + component + '>'
                };
            } else if (component.prototype instanceof _Component2.default) {
                var instance = new component(props, children, {
                    context: context,
                    watchStores: component.watchStores
                });

                return {
                    v: renderToString(instance.render(), context)
                };
            } else if (typeof component === 'function') {
                return {
                    v: renderToString(component(props, children), context)
                };
            }
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }

    return '';
};

exports.default = renderToString;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Events2 = require('./Events');

var _Events3 = _interopRequireDefault(_Events2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Store = function (_Events) {
    _inherits(Store, _Events);

    function Store(_ref) {
        var context = _ref.context;
        var storeName = _ref.storeName;
        var state = _ref.state;
        var _ref$eventHandlers = _ref.eventHandlers;
        var eventHandlers = _ref$eventHandlers === undefined ? {} : _ref$eventHandlers;

        _classCallCheck(this, Store);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Store).call(this));

        _this.context = context;
        _this.storeName = storeName;

        for (var eventName in eventHandlers) {
            if (eventHandlers.hasOwnProperty(eventName)) {
                _this.bindEventHandler(eventName, eventHandlers[eventName]);
            }
        }

        if (state) {
            _this.state = state;
        } else {
            _this.initialize();
        }
        return _this;
    }

    _createClass(Store, [{
        key: 'initialize',
        value: function initialize() {
            this.state = this.state || {};
        }
    }, {
        key: 'getState',
        value: function getState() {
            return this.state;
        }
    }, {
        key: 'bindEventHandler',
        value: function bindEventHandler(eventName, handlerName) {
            var _this2 = this;

            var context = this.context;


            context.on(eventName, function (payload) {
                var state = _this2.getState(),
                    newState = undefined;

                _this2[handlerName](payload);
                newState = _this2.getState();

                if (state !== newState) {
                    _this2.emit('CHANGE', newState);
                }
            });
        }
    }]);

    return Store;
}(_Events3.default);

exports.default = Store;
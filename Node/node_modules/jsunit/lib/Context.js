'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Events2 = require('./Events');

var _Events3 = _interopRequireDefault(_Events2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Context = function (_Events) {
    _inherits(Context, _Events);

    function Context(_ref) {
        var _ref$stores = _ref.stores;
        var stores = _ref$stores === undefined ? [] : _ref$stores;
        var _ref$state = _ref.state;
        var state = _ref$state === undefined ? {} : _ref$state;

        _classCallCheck(this, Context);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Context).call(this));

        _this.state = state;

        stores.forEach(function (Store) {
            return _this.initStore(Store);
        });
        return _this;
    }

    _createClass(Context, [{
        key: 'initStore',
        value: function initStore(Store) {
            var _this2 = this;

            var storeName = Store.storeName;
            var eventHandlers = Store.eventHandlers;
            var store = new Store({
                context: this,
                storeName: storeName,
                eventHandlers: eventHandlers,
                state: this.state[storeName]
            });

            this.state[storeName] = store.getState();

            store.on('CHANGE', function (state) {
                return _this2.setStoreState(storeName, state);
            });
        }
    }, {
        key: 'setStoreState',
        value: function setStoreState(storeName, state) {
            this.state[storeName] = state;
            this.emit(storeName, this.state);
        }
    }]);

    return Context;
}(_Events3.default);

exports.default = Context;